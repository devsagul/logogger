// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: internal/proto/logogger.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogoggerClient is the client API for Logogger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogoggerClient interface {
	RetrieveValue(ctx context.Context, in *MetricsValue, opts ...grpc.CallOption) (*MetricsValue, error)
	ListValues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsList, error)
	UpdateValue(ctx context.Context, in *MetricsValue, opts ...grpc.CallOption) (*MetricsValue, error)
	UpdateValues(ctx context.Context, in *MetricsList, opts ...grpc.CallOption) (*MetricsList, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type logoggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogoggerClient(cc grpc.ClientConnInterface) LogoggerClient {
	return &logoggerClient{cc}
}

func (c *logoggerClient) RetrieveValue(ctx context.Context, in *MetricsValue, opts ...grpc.CallOption) (*MetricsValue, error) {
	out := new(MetricsValue)
	err := c.cc.Invoke(ctx, "/logogger.Logogger/RetrieveValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logoggerClient) ListValues(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsList, error) {
	out := new(MetricsList)
	err := c.cc.Invoke(ctx, "/logogger.Logogger/ListValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logoggerClient) UpdateValue(ctx context.Context, in *MetricsValue, opts ...grpc.CallOption) (*MetricsValue, error) {
	out := new(MetricsValue)
	err := c.cc.Invoke(ctx, "/logogger.Logogger/UpdateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logoggerClient) UpdateValues(ctx context.Context, in *MetricsList, opts ...grpc.CallOption) (*MetricsList, error) {
	out := new(MetricsList)
	err := c.cc.Invoke(ctx, "/logogger.Logogger/UpdateValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logoggerClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/logogger.Logogger/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogoggerServer is the server API for Logogger service.
// All implementations must embed UnimplementedLogoggerServer
// for forward compatibility
type LogoggerServer interface {
	RetrieveValue(context.Context, *MetricsValue) (*MetricsValue, error)
	ListValues(context.Context, *Empty) (*MetricsList, error)
	UpdateValue(context.Context, *MetricsValue) (*MetricsValue, error)
	UpdateValues(context.Context, *MetricsList) (*MetricsList, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedLogoggerServer()
}

// UnimplementedLogoggerServer must be embedded to have forward compatible implementations.
type UnimplementedLogoggerServer struct {
}

func (UnimplementedLogoggerServer) RetrieveValue(context.Context, *MetricsValue) (*MetricsValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveValue not implemented")
}
func (UnimplementedLogoggerServer) ListValues(context.Context, *Empty) (*MetricsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValues not implemented")
}
func (UnimplementedLogoggerServer) UpdateValue(context.Context, *MetricsValue) (*MetricsValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedLogoggerServer) UpdateValues(context.Context, *MetricsList) (*MetricsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValues not implemented")
}
func (UnimplementedLogoggerServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLogoggerServer) mustEmbedUnimplementedLogoggerServer() {}

// UnsafeLogoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogoggerServer will
// result in compilation errors.
type UnsafeLogoggerServer interface {
	mustEmbedUnimplementedLogoggerServer()
}

func RegisterLogoggerServer(s grpc.ServiceRegistrar, srv LogoggerServer) {
	s.RegisterService(&Logogger_ServiceDesc, srv)
}

func _Logogger_RetrieveValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogoggerServer).RetrieveValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logogger.Logogger/RetrieveValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogoggerServer).RetrieveValue(ctx, req.(*MetricsValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logogger_ListValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogoggerServer).ListValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logogger.Logogger/ListValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogoggerServer).ListValues(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logogger_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogoggerServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logogger.Logogger/UpdateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogoggerServer).UpdateValue(ctx, req.(*MetricsValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logogger_UpdateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogoggerServer).UpdateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logogger.Logogger/UpdateValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogoggerServer).UpdateValues(ctx, req.(*MetricsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logogger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogoggerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logogger.Logogger/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogoggerServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Logogger_ServiceDesc is the grpc.ServiceDesc for Logogger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logogger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logogger.Logogger",
	HandlerType: (*LogoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveValue",
			Handler:    _Logogger_RetrieveValue_Handler,
		},
		{
			MethodName: "ListValues",
			Handler:    _Logogger_ListValues_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _Logogger_UpdateValue_Handler,
		},
		{
			MethodName: "UpdateValues",
			Handler:    _Logogger_UpdateValues_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Logogger_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/logogger.proto",
}
